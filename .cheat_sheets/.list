# Creating a list
my_list = [1, 2, 3, 4, 5]
empty_list = []

# Accessing elements
first_element = my_list[0]
last_element = my_list[-1]
slicing = my_list[1:4]  # Returns elements at index 1, 2, 3

# Modifying elements
my_list[0] = 10  # Updates the element at index 0
my_list.append(6)  # Adds 6 to the end of the list
my_list.extend([7, 8, 9])  # Adds multiple elements to the end of the list

# Removing elements
my_list.remove(3)  # Removes the first occurrence of 3 from the list
popped_element = my_list.pop()  # Removes and returns the last element

# List operations
length = len(my_list)  # Returns the length of the list
sorted_list = sorted(my_list)  # Returns a new sorted list
reversed_list = list(reversed(my_list))  # Returns a new reversed list
sum_of_elements = sum(my_list)  # Returns the sum of all elements in the list

# List comprehension
squared_list = [x ** 2 for x in my_list]  # Creates a new list with squared elements of my_list

# Iterating over a list
for element in my_list:
    print(element)

# Checking if an element exists in a list
if 10 in my_list:
    print("10 is in the list")

# Clearing a list
my_list.clear()  # Removes all elements from the list


list of all the methods available for lists in Python:

1. `append(element)`: Adds an element to the end of the list.
2. `extend(iterable)`: Extends the list by appending elements from an iterable.
3. `insert(index, element)`: Inserts an element at a specific position in the list.
4. `remove(element)`: Removes the first occurrence of an element from the list.
5. `pop(index=-1)`: Removes and returns the element at a specific position in the list. If no index is provided, it removes and returns the last element.
6. `index(element, start=0, end=len(list))`: Returns the index of the first occurrence of an element in the list.
7. `count(element)`: Returns the number of occurrences of an element in the list.
8. `sort(key=None, reverse=False)`: Sorts the elements of the list in ascending order. The `key` parameter can be used to specify a custom sorting key, and the `reverse` parameter determines whether to sort in descending order.
9. `reverse()`: Reverses the order of the elements in the list.
10. `copy()`: Returns a shallow copy of the list.
11. `clear()`: Removes all elements from the list.

In addition to these methods, lists also support various built-in functions such as `len()`, `sorted()`, `reversed()`, and operators like `+` for concatenation and `*` for repetition.

